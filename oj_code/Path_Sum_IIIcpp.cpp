//#include<iostream>
//#include<string>
//#include<vector>
//#include<map>
//#include<iomanip>
//#include<algorithm>
//#include<fstream>
//#include <queue>
//#include<map>
//#include<set>
//#include<unordered_set>
//#include<unordered_map>
//#include <random>
//#include <cmath>
//#include<utility>
//using namespace std;
//#define PrintEx(EX) cout<<#EX<<" :\n"<<EX<<endl
//
//
// struct TreeNode {
//     int val;
//     TreeNode *left;
//     TreeNode *right;
//    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
// };
//
// int foo(TreeNode * root, int sum, map<int, int>& path,int cur) {
//	 if (root == NULL)
//		 return 0;
//
//	 int ret = 0,res = cur + root->val;
//	 ret = (res == sum ? 1 : 0) + path[res - sum];
//	 path[res]++;
//	 ret += foo(root->left, sum, path, res) + foo(root->right, sum, path, res);
//	 path[res]--;
//
//	 return ret;
//
// }
//int pathSum(TreeNode* root, int sum) {
//
//	map<int, int> path;
//	path[0] = 1;
//	int cnt = 0;
//	return foo(root, sum, path,0);
//	return cnt;
//}
//int main() {
//	TreeNode r(10);
//	r.left = new TreeNode(5);
//	r.right = new TreeNode(-3);
//	r.right->right = new TreeNode(11);
//
//	r.left->left = new TreeNode(3);
//	r.left->right = new TreeNode(2);
//	r.left->right->right = new TreeNode(1);
//	r.left->left->left = new TreeNode(3);
//	r.left->left->right = new TreeNode(-2);
//
//	cout << pathSum(&r, 8) << endl;;
//	return 0;
//}
//
///*
//int main() {
//std::random_device rd;  //Will be used to obtain a seed for the random number engine
//std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
//std::uniform_int_distribution<> dis(1, 6);
//
//for (int n=0; n<10; ++n)
////Use dis to transform the random unsigned int generated by gen into an int in [1, 6]
//std::cout << dis(gen) << ' ';
//std::cout << '\n';
//return 0;
//}
//*/